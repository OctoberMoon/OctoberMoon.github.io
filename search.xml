<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[区块链原理]]></title>
    <url>%2F2019%2F06%2F20%2F1%2F</url>
    <content type="text"><![CDATA[刻意练习,每日精进 转载 链接：https://www.cnblogs.com/sharpxiajun/p/8530782.html 一、概述 比特币是存储在计算机里一枚货币，计算机存储的本质就是一串数字，那么存储比特币的这串数字为什么就可以等同于真正的货币呢？而且比特币让人感觉很像黄金，不管这黄金从什么渠道获取（从沙子里掏的，还是自己购买的），人类都会认同它的财富价值。 说到比特币很多文章总结它的特点，例如：去中心化啊，记账系统，安全性好，不过它有什么特点，大家现在几乎都公认比特币可以等同于货币，但是比特币这种货币是有别于现实社会中的各国央行发行发行的法定货币，法定货币的一大重要特点就是需要一个权威的机构（一般是指代表国家的央行）来发行货币，法定货币的价值是由老百姓认同国家的权威性来体现的，不管怎么说法定货币是一种中心化的发行货币机制，法定货币都会受到国家这个中心所控制和约束。比特币的设计理念不同，它想通过一种没有任何权威中心所左右的方式发行货币，让货币只包含经济价值的本质属性。 比特币的价值体现方式是通过交易的记账流程来体现的，具体过程如下图所示： 12345&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;| || 支付交易 --&gt; 交易广播 --&gt; 交易写入区块 --&gt; 区块加入区块 || | &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 支付交易从产生一直到最后支付交易被成功写入了区块链，这样支付交易才会被真正确认，比特币的货币价值在这个过程中被体现，公司货币的发行也在这个过程中进行。 这张流程图可能会让很多人费解，为什么本人会说它体现了比特币的货币价值？本人之所以这么概括，主要包含下面的理解： 该流程包含了比特币的发行，流通，交易的全过程；该流程是在没有中心机构参入的情况下进行的，但是该流程和现实货币的价值使用一样的权威有效。完整理解了该流程就可以理解比特币可以等同于实际的法定货币的道理了。 下面本人将一个一个环节的解释该流程。 二、支付交易 比特币里如何完成支付交易了，下图是中本聪论文里的交易流程图，如下所示： 说到支付交易就牵涉比特币原理之一的非对称加密以及数字签名技术。在比特币的知识范畴里有一个钱包的概念，钱包的本质就是一对非对称加密的公钥和私钥，如果我们把比特币的使用映射到现实的使用者即人，那么公钥就是这个人对外的唯一身份标识，私钥则是使用者开启钱包使用比特币的钥匙。公钥是对外公开的，在比特币的规则里公钥即代表了网络里钱包使用者的地址。 按照比特币的规则定义，公钥的长度是512个字节，为了方便公钥在网络上的传播，公钥要被转化为160位的数字指纹，数字指纹是二进制编码，转化为字符串就是26到35位的字符。 那么假如A向B支付比特币，那么A就得要知道B的地址，这样A才能把比特币发送给B。下面我将描述下这个支付的流程，具体如下： A向B支付比特币的交易即A的地址向B的地址转移比特币的过程，下面我们举例说明： 首先是A向B发送数据，这些数据包含如下内容： 上一笔交易的 Hash（你从哪里得到这些比特币）本次交易双方的地址支付方的公钥支付方的私钥生成的数字签名 B收到信息后进行相关验证，验证过程如下： 第一步，找到上一笔交易，确认支付方的比特币来源。 第二步，算出支付方公钥的指纹，确认与支付方的地址一致，从而保证公钥属实。 第三步，使用公钥去解开数字签名，保证私钥属实。 验证无误，B认为该交易是可以执行，注意：这里只是认为该交易可以执行，并没有确认该交易有效成功。 从支付交易的传输数据和验证流程我们可以看到，比特币的支付过程中主要是使用到了支付方即A的交易数据信息以及A的公钥和私钥，被支付方即B只是做验证操作的有效性而已，被支付方B自己的公钥、私钥以及交易信息都没参入支付过程，因此我们可以认为私钥和公钥主要是用于把比特币用花出去的场景。 如果想要交易最终被确认成功，接下来被支付方B就要将该笔交易广播到全网去了，如是流程进入到了交易广播的阶段。 三、交易广播 本人认为从交易广播开始，就进入了时下很火爆的区块链技术范畴了，因为广播出来的交易最终都会被网络里的矿工（矿工即是区块链分布式系统下的各个子节点）接收，作为矿工创建区域链区块的输入。这个过程比较简单，只是数据的传输，但是对于技术实现而言就是技术的难点之一，因为此块技术包含了编程领域里比较复杂的网络通讯技术和高并发技术。不过如果把交易广播作为区块链的输入来理解，那么这里还牵涉跟输入相关的一个重要技术那就是时间戳服务器，时间戳服务器的作用是给同一时间下的交易加上一个时间维度的标识，有了时间戳，我们就可以确定在某个时间点该交易一定发生过。 时间戳服务器在中本聪的论文里是这么定义： 时间戳服务器通过对以区块(block)形式存在的一组数据实施随机散列而加上时间戳，并将该随机散列进行广播，就像在新闻或世界性新闻组网络（Usenet）的发帖一样。 由此定义我们可以知道时间戳是对新产生的交易记录按时间维度分组，这样就保证每条实际发生的交易都能正确的被保存下来。 时间戳服务器的作用对于比特币的货币价值至关重要，这里我举一个例子：在传统的交易里往往是没有时间维度的概念，没有时间维度的交易往往会影响到交易的信用评价，例如：甲方和乙方账户里各有100块钱，一天甲方向乙方账户打入了10块钱，第二天乙方账户又向甲方账户打入10块，最终甲乙双方的账户任然是100块，如果交易过程没有被记录，那么我们就很难追溯其中的交易行为，假如甲乙双方进行了违法的交易，最终在检查前让账户平衡，那么危险的行为就会被藏匿。因此时间戳服务器给比特币的交易提供了一种正向的不可逆的交易流程，这就让比特币的区域链技术达到了行为可追溯的功能，能解决沟通中信息不对称的问题，这就是区块链技术能被应用到其他领域一个重要原因。 交易广播后就是交易写入区块的过程了。 四、交易写入区块 交易最终被确认就是要将交易写入到区块链里，而区块链是由一个个区块串联起来的，区块才是记录交易的实体，因此要写入区块链，首先要将信息写到区块里。那么区块是如何产生的呢？ 区块的产生是有网络中一个个矿机来完成。但是矿机要产生一个新区块并没有那么容易。这里我们首先讲下区块的数据结构，区块分为区块头和区块体，区块体里存储的就是一条条的交易记录，这些交易记录都是被支付方例如B广播到网络中去的交易记录。 在比特币系统里一个块的大小本指定为1个mb，一笔交易大概500个字节，因此一个区块大概可以存储2000笔左右的交易。区块的里最关键因素在区块头里，区块头里有该区块的很多特征值，比较关键的有 区块生成时间区块体的Hash值上一个区块的Hash值 以上值都是外部获取的，除此之外区块头还包含一个难度系数difficulty和Nonce的随机数，矿机系统里还有一个固定的常量值。这里有个公式： target = 固定的常量值/difficulty 由此可见难度系数越大，target的值就会越小。矿机会对区块头的数据进行hash计算，hash的结果是一串二进制数字，如果最终的hash结果要小于target那么该区块才会被认为有效区块，这个有效区块才能被同步到区块链里，但是计算出一个有效的区块可没有那么容易，需要反复的计算才能得到最终结果。可是由于一个区块特征属性一般都是固定的，为了让每次区块头的每次计算出来的hash值都不同，每次无效的hash结果计算后，矿机程序就会动态调整Nonce的值，让最终hash的值发生变化。Nonce是一个32位的二进制数字，因此它的取值范围就是0到21.47亿。那么命中target就是一个穷举的数学过程了，一个矿机可能幸运很快算出来，也有可能算满了21.47亿次都不能命中，这时候框架就得重新同步区块链数据，重新计算。这就是区块链技术里的工作量证明，可见一个区块产生是相当的麻烦和困难的。 回到区块产生的讲述，由上面流程，我们发现一个区块的产生是非常耗费资源即耗费计算机的算力和电力资源，那么为什么矿机都乐此不疲的想产生区块呢？这是因为每产生一个区块的经济奖励是非常诱人的。 中本聪是这么来设立生成区块的奖励的，比特币系统是2008年运行的，当时产生一个有效新区块的奖励是50个比特币，这个数值每4年减半，也就是说到了2012年后就是25个，2016年后就是12.5个，现在是2018年就是一个新区块的奖励就是12.5个，而时下的比特币价格都超过了1万美金，这个收入是极其可观的。从这个规则我们也可以发现比特币的总有一天是不会在增加的，到了新区块不给新比特币奖励，那么这时就没有矿可以挖了，为了激励框架继续挖矿，中本聪还建立了另外一种奖励措施那就是手续费，区块是记录交易，每个交易被记录都是要付费的，而且每个区块都会根据手续费的高低排列交易，那么没给手续费的或者手续费很低的交易往往很难写入到区块，也就是最终很难写入到区块链，交易就会很难成立，这就可以让矿机有无限动力挖矿。 新区块诞生会奖励比特币，这就是比特币发行的流程，这也就是人们为什么会乐此不疲的做矿工的原因，有巨大的利益驱使的。 新区块产生了就要将新区块加入到区块链里了。 五、区块写入区块链 新区块并不是简单的加入到区块链的，因为区块链是一个没有中心管理员的分布式数据库，那么不可能有个权威机构来做加入链条操作的，新区块加入到区块链的过程是一个集体协商的过程，具体的过程如下： 矿机成功产生了一个区块，矿机就会把该区块在全网进行广播，有完整区域链数据备份的服务器就会接收到该信息，并将新的区块加入到区块链的末尾。及时新的区块加入到了区块链的末尾也还没有说明新区块加入区块链是成功的，这里我们把成功加入区块链的区块给个名字叫做节点，只有新区块被加入到了最长的链条即最正宗的链条才能叫做节点，这个规则产生的原因是因为在相同时间下可能会有多个新区块加入到区块链，到底那个才是有效的，需要一个判定机制，这个机制一般是那个新区块最先获得了连续的6个新区块，那么该链条就是正宗链条，即可确定该区块为区块链的一个新的节点了。 不过一个新区块加入区块链的时间间隔是被严格控制的，比特币系统里是每10分钟才有一次机会把新区块加入到区块链里，在加上后续需要6个新区块加入气候才能最终确认区块链的新区块加入成功，这就说明一个交易被确认成功最快也需要1个小时左右，我们还可以这么算下，一个区块存储最多2000比交易，10分钟也就是600秒，平摊下来1秒钟比特币系统也就只能处理3到5比交易，这也就是比特币交易时间长的一个重要原因。当然时间间隔之所以设立还有一个重要原因，限制区块的产生的数量，控制新区块的数量也就是控制比特币的总量，也就是说比特币的总数量其实是固定的，总有一天会发完的。 交易被成功写入区块链后，被支付方B同步区块链的数据，B如果在区块链里找到了自己的交易记录，那么交易就被认为有效。 以上就是比特币的完整交易流程了。 六、总结与疑问 由以上对于比特币原理和流程分析，我们就可以理解比特币为什么能等同于法定货币了，本人认为理由如下： 比特币的唯一性，比特币在网络里是唯一，而且这种唯一性很难被篡改；比特币的总量恒定，比特币不会发生通货膨胀的问题，因此比特币有保质的作用，这个跟黄金很类似；比特币的安全性很高，比特币是基于记账原理来产生价值，比特币的交易情况是全网透明的，每笔交易都可以追溯，而且交易记录机制安全可靠，很难有外部的非理性原因影响到比特币的价值。 这里还有一些疑问需要重点说明下： 问题一：比特币为什么很难被篡改？ 这主要是比特币产生的载体区块是非常难以产生的，需要大量的工作流证明，而且区块的有效性又是和区块链里该区块的下游区块相关，如果要篡改一个比特币，那么跟该比特币交易相关的下游区块都要更改，这就倍增篡改比特币的难度。当然理论上如果有实体掌握了区块链全网51%的算力是可以篡改比特币的，但是在公网下这种情况基本很难实现，不过要是区块链做成私有的这就很难说了，私有的区块链引入了中心机构，但是这样的区块链就不是真正意义的区块链了。 问题二：为什么现在挖矿是越来越难了？ 挖矿其实就是在做hash运算，我们知道产生一个新区块需要大量的hash运算，只有拥有强大算力的实体才能获得先机，工作量证明的hash运算从CPU发展到GPU到现在的基于硬件的专业化的矿机，因此普通人很难有那么大的财力在算力竞争下获胜，所以个人挖矿目前是一件几乎无法完成的事情了。 问题三：区块链为啥现在会特别火？ 这个问题我没法回答，其实区块链目前很火还是一种炒作，毕竟区块链技术除了比特币还没有什么重量级的应用出现，但是区块链技术里面的很难更改的记账系统机制是非常有前景的，目前国家，大型企业都涉猎其中，相信区块链的前景是非常不错的，这也是本人为什么花精力研究区块链的原因所在。 七、区块链的相关技术 研究区块链的原理还是想为自己做技术研究做准备，这里大概总结下自己学习中发现的区块链的一些底层技术，具体如下： 非对称加密技术，这个使用开源技术即可；Hash计算的技术，主要是SHA技术；数字签名或者叫做数字指纹技术，这个其实也是HASH技术，不过HASH出来的值一般是二进制，很难传播，因此需要一些签名技术将二进制转化成可以阅读的字符技术，例如把公钥变成地址（字符串），这里应该牵涉到一些字符置换的技术例如Base58P2P相关的网络通讯技术，分布式系统里的一个节点如何广播信息，节点如何轮询接收广播出来信息的技术，还有就是同步区域链数据的技术；跟区域链相关的各种算法了，例如工作量证明的算法，Merkle树的算法等等。]]></content>
      <categories>
        <category>区块链</category>
      </categories>
      <tags>
        <tag>区块链</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Centos GCC升级6.0]]></title>
    <url>%2F2019%2F06%2F11%2F1%2F</url>
    <content type="text"><![CDATA[刻意练习,每日精进 获取安装包并解压 wget http://ftp.gnu.org/gnu/gcc/gcc-6.1.0/gcc-6.1.0.tar.bz2 tar -jxvf gcc-6.1.0.tar.bz2 当然，http://ftp.gnu.org/gnu/gcc 里面有所有的gcc版本供下载，最新版本已经有6.1.0啦. 建议下载.bz2的压缩包,文件更小,下载时间更少. 下载供编译需求的依赖项 参考文献[1]中说：这个神奇的脚本文件会帮我们下载、配置、安装依赖库，可以节约我们大量的时间和精力。 cd gcc-6.1.0 ./contrib/download_prerequisites 建立一个目录供编译出的文件存放 mkdir gcc-build-6.1.0 cd gcc-build-6.1.0 生成Makefile文件 ../configure -enable-checking=release -enable-languages=c,c++ -disable-multilib 编译 make -j4 -j4选项是make对多核处理器的优化，如果不成功请使用 make，相关优化选项可以移步至参考文献[2]。 （注意：此步骤非常耗时,我虚拟机耗时近3小时; 实体机近80分钟,CPU基本是满的,内存也使用不少） 安装make install (安装需要root权限!) 查看安装 ls /usr/local/bin | grep gcc 重启，然后查看gcc版本gcc -v 写个C++11 特性的程序段 测试tryCpp11.cc 代码省略…. g++ -std=c++11 -o tryCpp11 tryCpp11.cc 升级gcc，生成的动态库没有替换老版本gcc的动态库 源码编译升级安装了gcc后，编译程序或运行其它程序时，有时会出现类似/usr/lib64/libstdc++.so.6: version `GLIBCXX_3.4.21’ not found的问题。这是因为升级gcc时，生成的动态库没有替换老版本gcc的动态库导致的，将gcc最新版本的动态库替换系统中老版本的动态库即可解决。 9.1 运行以下命令检查动态库： strings /usr/lib64/libstdc++.so.6 | grep GLIBC 从输出可以看出，gcc的动态库还是旧版本的。说明出现这些问题，是因为升级gcc时，生成的动态库没有替换老版本gcc的动态库。 9.2 执行以下命令，查找编译gcc时生成的最新动态库： find / -name &quot;libstdc++.so*&quot; 将上面的最新动态库libstdc++.so.6.0.22复制到/usr/lib64目录下 cd /usr/lib64 cp /root/Downloads/gcc-6.1.0/gcc-build-6.1.0/stage1-x86_64-pc-linux-gnu/libstdc++-v3/src/.libs/libstdc++.so.6.0.22 ./ 9.3 删除原来软连接： rm -rf libstdc++.so.6 9.4 将默认库的软连接指向最新动态库： ln -s libstdc++.so.6.0.22 libstdc++.so.6 9.5 默认动态库升级完成。重新运行以下命令检查动态库： strings /usr/lib64/libstdc++.so.6 | grep GLIBC 可以看到 输出有&quot;GLIBCXX_3.4.21&quot; 了]]></content>
  </entry>
  <entry>
    <title><![CDATA[ssh闲置时间过长而断开]]></title>
    <url>%2F2019%2F06%2F10%2F1%2F</url>
    <content type="text"><![CDATA[刻意练习,每日精进 方法一、 修改/etc/ssh/sshd_config配置文件，找到ClientAliveCountMax（单位为分钟）修改你想要的值， 执行service sshd reload 方法二、 找到所在用户的.ssh目录,如root用户该目录在： /root/.ssh/ 在该目录创建config文件 vi /root/.ssh/config 加入下面一句： ServerAliveInterval 60 保存退出，重新开启root用户的shell，则再ssh远程服务器的时候， 不会因为长时间操作断开。应该是加入这句之后，ssh客户端会每隔一 段时间自动与ssh服务器通信一次，所以长时间操作不会断开。方法三、 修改/etc/profile配置文件 # vi /etc/profile 增加：TMOUT=1800 这样30分钟没操作就自动LOGOUT 方法四、 利用expect 模拟键盘动作，在闲置时间之内模拟地给个键盘响应,将下列代码保存为xxx，然后用expect执行 #!/usr/bin/expect set timeout 60 spawn ssh user@host interact { timeout 300 {send &quot;\x20&quot;} } expect xxx 接着按提示输入密码就可以了，这样每隔300秒就会自动打一个空格(\x20)，具体的时间间隔可以根据具体情况设置。 方法五、windows下通过工具连接，可以设置为secureCRT：选项—终端—反空闲 中设置每隔多少秒发送一个字符串，或者是NO-OP协议包putty：putty -&gt; Connection -&gt; Seconds between keepalives ( 0 to turn off ), 默认为0, 改为300. Mac 设置 profiles -&gt; session -&gt; “when idle,send ASCII code “ 选中 修改为 30 seconds]]></content>
      <categories>
        <category>ssh</category>
      </categories>
      <tags>
        <tag>ssh</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ARTS_9]]></title>
    <url>%2F2019%2F06%2F04%2F1%2F</url>
    <content type="text"><![CDATA[刻意练习,每日精进 移除元素123456789101112131415161718 class Solution &#123; /** * @param Integer[] $nums * @param Integer $val * @return Integer */ function removeElement(&amp;$nums, $val) &#123; $j = 0; for ($i=0;$i&lt; count($nums);$i++)&#123; if($nums[$i] != $val)&#123; $nums[$j] = $nums[$i]; $j++; &#125; &#125; return $j; &#125;&#125; ReviewThe Cashless Economy. 原文 Tipsdocker 学习 ShareDocker Contos 搭建 PHP 环境]]></content>
      <categories>
        <category>ARTS</category>
      </categories>
      <tags>
        <tag>ARTS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Docker Contos 搭建 PHP 环境]]></title>
    <url>%2F2019%2F05%2F30%2F3%2F</url>
    <content type="text"><![CDATA[刻意练习,每日精进 Docker Contos 搭建 PHP 环境 uname -r //CentOS 系统的内核版本高于 3.10 ，查看本页面的前提条件来验证你的CentOS 版本是否支持 Docker yum -y install docker-io //安装docker service d ocker start //启动 镜像加速 网易镜像地址 vi /etc/docker/daemon.json //添加镜像 `{ &quot;registry-mirrors&quot;: [&quot;http://hub-mirror.c.163.com&quot;] } ` 安装 Nginx docker pull nginx //拉取官方镜像 docker images //查看 docker run -p 80:80 -d –name mynginx -v /docker/www:/usr/share/nginx/www nginx //开启nginx应用容器 -p 80:80：将容器的80端口映射到主机的80端口 -d 后台运行(守护进程) --name mynginx：将容器命名为mynginx -v 将主机中当前目录下的www挂载到容器的www目录 docker ps -a //查看容器启动情况 Docker 安装 PHP docker pull php:7.2-fpm //拉取官方PHP镜像 docker images //查看 docker run -p 9000:9000 -d –name myphp-fpm -v /docker/www:/usr/share/nginx/www php:7.1-fpm //开启php-frm应用容器 docker ps -a //查看容器启动情况 docker inspect myphp-fpm | grep “IPAddress” //查看ip信息&quot;SecondaryIPAddresses&quot;: null, &quot;IPAddress&quot;: &quot;172.17.0.3&quot;, &quot;IPAddress&quot;: &quot;172.17.0.3&quot;, [root@localhost ~]# docker exec -it mynginx bash //进入容器 vi /etc/nginx/conf.d/default.conf //修改配置文件 然后使用ctrl + p + q退出容器，使用exit的话会让容器停止。 docker cp mynginx:/etc/nginx/conf.d/default.conf ./default.conf 在宿主机修改配置文件的php部分，内容如下：`server { listen 80; server_name localhost; #charset koi8-r; #access_log /var/log/nginx/host.access.log main; location / { root /usr/share/nginx/html; index index.php index.html index.htm; } #error_page 404 /404.html; # redirect server error pages to the static page /50x.html # error_page 500 502 503 504 /50x.html; location = /50x.html { root /usr/share/nginx/html; } # proxy the PHP scripts to Apache listening on 127.0.0.1:80 # #location ~ \.php$ { # proxy_pass http://127.0.0.1; #} # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000 # location ~ \.php$ { root html; fastcgi_pass 172.17.0.3:9000; fastcgi_index index.php; fastcgi_param SCRIPT_FILENAME /usr/share/nginx/www$fastcgi_script_name; include fastcgi_params; } # deny access to .htaccess files, if Apache&apos;s document root # concurs with nginx&apos;s one # #location ~ /\.ht { # deny all; #} }` docker cp ./default.conf mynginx:/etc/nginx/conf.d/default.conf docker exec -it mynginx bash //进入容器中 root@3218b3ad4e47:/# service nginx reload //重新载入nginx配置文件 echo “&lt;?php echo phpinfo();” &gt; index.php //写phpinfo文件测试 访问成功]]></content>
      <categories>
        <category>Docker</category>
        <category>php</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ARTS_2]]></title>
    <url>%2F2019%2F05%2F30%2F2%2F</url>
    <content type="text"><![CDATA[刻意练习,每日精进 两数之和 12345678910111213class Solution &#123; function twoSum($nums,$target) &#123; foreach($nums as $k=&gt;$v)&#123; $mu = $target-$v; $res = array_search($mu,$nums); if($res)&#123; return [$k,$res]; &#125;else&#123; array_diff($nums, [$v]); &#125; &#125; &#125; &#125; Review Laravel 翻译：https://learnku.com/laravel/t/26375 在 Laravel 项目中，我们收到很多希望能够为构建多语言 Web 应用提供更好支持的请求。 Tips Yii2 使用图片上传 Model 定义： ![62a20bfaa9212e3f5c94b6219d52cce4.png](evernotecid://2D3ECD61-9BE7-4422-B7DD-05A6FC560EE0/appyinxiangcom/23972896/ENResource/p2) 控制器使用： 12345678910111213141516171819202122private function upload()&#123; if ($_FILES[&apos;Product&apos;][&apos;error&apos;][&apos;cover&apos;] &gt; 0) &#123; return false; &#125; $zone = &apos;south_china&apos;; $qiniu = new Qiniu(Product::AK,Product::SK,Product::DOMAIN, Product::BUCKET,$zone); $key = uniqid(); $qiniu-&gt;uploadFile($_FILES[&apos;Product&apos;][&apos;tmp_name&apos;][&apos;cover&apos;],$key); $cover = $qiniu-&gt;getLink($key); $pics =[]; foreach ($_FILES[&apos;Product&apos;][&apos;tmp_name&apos;][&apos;pics&apos;] as $k=&gt;$file) &#123; if ($_FILES[&apos;Product&apos;][&apos;error&apos;][&apos;pics&apos;][$k] &gt; 0) &#123; continue; &#125; $key = uniqid(); $qiniu-&gt;uploadFile($file,$key); $pics[$key] = $qiniu-&gt;getLink($key); &#125; $pics = json_encode($pics); return compact(&apos;cover&apos;,&apos;pics&apos;); &#125; Share Docker 宿主机连接Docker数据库 docker-compose exec mysql bash mysql -uroot -proot ALTER USER ‘root’@’%’ IDENTIFIED WITH mysql_native_password BY ‘root’;]]></content>
      <categories>
        <category>ARTS</category>
      </categories>
      <tags>
        <tag>ARTS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[centos 搭建 LNMP 环境]]></title>
    <url>%2F2019%2F05%2F30%2F1%2F</url>
    <content type="text"><![CDATA[刻意练习,每日精进 linux Centos 搭建 LNMP 环境yum 命令: yum search xxx ：搜索带有某个关键字的安装包 1. 安装更新yumyum update 2. 安装 nginx yum localinstall http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm //nginx源 yum repolist enabled | grep “nginx*” //显示仓库列表 yum -y install nginx systemctl start nginx //启动 systemctl enable nginx.service //设置开机自启动 systemctl list-dependencies | grep nginx //检查开机自启动是否设置成功 3. 浏览器检测是否安装成功访问不成功 方法一: systemctl stop firewalld.service //关闭防火墙 方法二: firewall-cmd --zone=public --add-port=80/tcp --permanent //添加80端口 firewall-cmd --reload //重启防火墙 firewall-cmd --list-ports //查看是否添加成功 1212/tcp 80/tcp //显示 即成功 浏览器访问 Welcome to nginx! //成功显示 4.安装mysql yum -y localinstall http://dev.mysql.com/get/mysql57-community-release-el7-7.noarch.rpm //安装mysql源 yum repolist enabled | grep “mysql.-community.“ yum -y install mysql-community-server install mysql-community-devel //安装mysql 查看 版本信息 [root@7S ~]# rpm -qi mysql-community-server 12345678910111213141516171819202122232425262728293031323334353637Name : mysql-community-serverVersion : 5.7.26Release : 1.el7Architecture: x86_64Install Date: 2019年05月29日 星期三 10时42分22秒Group : Applications/DatabasesSize : 781939563License : Copyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved. Under GPLv2 license as shown in the Description field.Signature : DSA/SHA1, 2019年04月15日 星期一 17时21分36秒, Key ID 8c718d3b5072e1f5Source RPM : mysql-community-5.7.26-1.el7.src.rpmBuild Date : 2019年04月13日 星期六 22时42分09秒Build Host : loki02.no.oracle.comRelocations : (not relocatable)Packager : MySQL Release Engineering &lt;mysql-build@oss.oracle.com&gt;Vendor : Oracle and/or its affiliatesURL : http://www.mysql.com/Summary : A very fast and reliable SQL database serverDescription :The MySQL(TM) software delivers a very fast, multi-threaded, multi-user,and robust SQL (Structured Query Language) database server. MySQL Serveris intended for mission-critical, heavy-load production systems as wellas for embedding into mass-deployed software. MySQL is a trademark ofOracle and/or its affiliatesThe MySQL software has Dual Licensing, which means you can use the MySQLsoftware free of charge under the GNU General Public License(http://www.gnu.org/licenses/). You can also purchase commercial MySQLlicenses from Oracle and/or its affiliates if you do not wish to be bound by the terms ofthe GPL. See the chapter &quot;Licensing and Support&quot; in the manual forfurther info.The MySQL web site (http://www.mysql.com/) provides the latest news andinformation about the MySQL software. Also please see the documentationand the manual for more information.This package includes the MySQL server binary as well as related utilitiesto run and administer a MySQL server. service mysqld start //启动mysql service mysqld status 或者 ps -ef | grep mysql //检查mysql正常启动 systemctl enable mysqld.service //设置mysqld服务开机自启动 systemctl list-dependencies | grep mysqld //检查mysqld开机自启动是否设置成功 mysql5.7 增强了安全机制, 系统会自动生成一个随机的密码 cat /var/log/mysqld.log|grep ‘A temporary password’ //查看mysql的随机密码 使用查询得到的随机密码在终端登录 mysql -u root -p 更改密码(mysql文档规定,密码必须包括大小写字母数字加特殊符号&gt;8位) 根据获取的随机密码登录 ALTER USER ‘root‘@’localhost’ IDENTIFIED BY ‘Yourpassword’;修改密码 退出mysql客户端,用刚才修改的密码登录确保密码修改成功 exit； 使用新密码登录 5. php7.2 安装 rpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm rpm -Uvh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm yum -y install php72w php72w-fpm yum -y install php72w-mbstring php72w-common php72w-gd php72w-mcrypt yum -y install php72w-mysql php72w-xml php72w-cli php72w-devel yum -y install php72w-pecl-memcached php72w-pecl-redis php72w-opcache php -m //看扩展 php -v //php 版本信息6. nginx 配置新建.conf后缀的文件文件目录在/etc/nginx/conf.d/下面 复制下面内容放进去ps aux | grep “nginx: worker process” | awk ‘{print $1}’ // 查看当前用户chcon -R -t httpd_sys_content_t /home/www/ // 递归地修改对象的安全上下文gpasswd -a nginx root //添加成员chmod g+x /root 1234567891011121314151617181920server &#123; listen 80; server_name danshufenxiang.com; root /home/www; #自定义站点位置这是你的站点根目录 index index.php index.html index.htm; location / &#123; &#125; error_page 500 502 503 504 /50x.html; location = /50x.html &#123; root /usr/share/nginx/html; &#125; location ~ \.php$ &#123; fastcgi_pass 127.0.0.1:9000; fastcgi_index index.php; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; include fastcgi_params; &#125;&#125;]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>lnmp</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ARTS_8]]></title>
    <url>%2F2019%2F05%2F29%2F8%2F</url>
    <content type="text"><![CDATA[刻意练习,每日精进 删除排序数组中的重复项 1234567891011121314151617181920212223 class Solution &#123; /** * @param Integer[] $nums * @return Integer */ function removeDuplicates(&amp;$nums) &#123; $len = count($nums); for ($i=0;$i&lt;$len;$i++) &#123; if (!isset($nums[$i])) &#123; continue; &#125; for ($j=$i+1;$j&lt;$len;$j++) &#123; if ($nums[$i]==$nums[$j]) &#123; unset($nums[$j]); &#125; else &#123; break; &#125; &#125; &#125; return count($nums); &#125;&#125; Review How To Use SSH to Connect to a Remote Server in Ubuntu. 原文 Tips总结下高并发 相关的知识点 ShareCentos防火墙操作 yum -y install php72w php72w-fpm yum -y install php72w-mbstring php72w-common php72w-gd php72w-mcrypt yum -y install php72w-mysql php72w-xml php72w-cli php72w-devel yum -y install php72w-pecl-memcached php72w-pecl-redis php72w-opcache]]></content>
      <categories>
        <category>ARTS</category>
      </categories>
      <tags>
        <tag>ARTS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Centos防火墙操作]]></title>
    <url>%2F2019%2F05%2F29%2F6%2F</url>
    <content type="text"><![CDATA[刻意练习,每日精进 1、firewalld的基本使用 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859启动： systemctl start firewalld查看状态： systemctl status firewalld停止： systemctl disable firewalld禁用： systemctl stop firewalld2. systemctl是CentOS7的服务管理工具中主要的工具，它融合之前service和chkconfig的功能于一体。启动防火墙： systemctl start firewalld.service关闭防火墙： systemctl stop firewalld.service重启防火墙： systemctl restart firewalld.service显示防火墙的状态： systemctl status firewalld.service在开机时防火墙： systemctl enable firewalld.service在开机时禁用防火墙： systemctl disable firewalld.service查看防火墙是否开机启动： systemctl is-enabled firewalld.service查看已启动的服务列表： systemctl list-unit-files|grep enabled查看启动失败的服务列表： systemctl --failed3.配置firewalld-cmd查看版本： firewall-cmd --version查看帮助： firewall-cmd --help显示状态： firewall-cmd --state查看所有打开的端口： firewall-cmd --zone=public --list-ports更新防火墙规则： firewall-cmd --reload查看区域信息: firewall-cmd --get-active-zones查看指定接口所属区域： firewall-cmd --get-zone-of-interface=eth0拒绝所有包： firewall-cmd --panic-on取消拒绝状态： firewall-cmd --panic-off查看是否拒绝： firewall-cmd --query-panic4：开启端口添加 firewall-cmd --zone=public --add-port=80/tcp --permanent （--permanent永久生效，没有此参数重启后失效） #开启80端口重新载入 firewall-cmd --reload查看 firewall-cmd --zone=public --query-port=80/tcp #查看80端口是否开放删除 firewall-cmd --zone= public --remove-port=80/tcp --permanent #删除80端口配置]]></content>
      <categories>
        <category>linux</category>
        <category>Centos</category>
      </categories>
      <tags>
        <tag>Centos</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ARTS_1]]></title>
    <url>%2F2019%2F05%2F28%2F9%2F</url>
    <content type="text"><![CDATA[刻意练习,每日精进 两数之和 12345678910111213class Solution &#123; function twoSum($nums,$target) &#123; foreach($nums as $k=&gt;$v)&#123; $mu = $target-$v; $res = array_search($mu,$nums); if($res)&#123; return [$k,$res]; &#125;else&#123; array_diff($nums, [$v]); &#125; &#125; &#125; &#125; Review Laravel 翻译：https://learnku.com/laravel/t/26375 在 Laravel 项目中，我们收到很多希望能够为构建多语言 Web 应用提供更好支持的请求。 Tips Yii2 使用图片上传 Model 定义： ![62a20bfaa9212e3f5c94b6219d52cce4.png](evernotecid://2D3ECD61-9BE7-4422-B7DD-05A6FC560EE0/appyinxiangcom/23972896/ENResource/p1) 控制器使用： 12345678910111213141516171819202122private function upload()&#123; if ($_FILES[&apos;Product&apos;][&apos;error&apos;][&apos;cover&apos;] &gt; 0) &#123; return false; &#125; $zone = &apos;south_china&apos;; $qiniu = new Qiniu(Product::AK,Product::SK,Product::DOMAIN, Product::BUCKET,$zone); $key = uniqid(); $qiniu-&gt;uploadFile($_FILES[&apos;Product&apos;][&apos;tmp_name&apos;][&apos;cover&apos;],$key); $cover = $qiniu-&gt;getLink($key); $pics =[]; foreach ($_FILES[&apos;Product&apos;][&apos;tmp_name&apos;][&apos;pics&apos;] as $k=&gt;$file) &#123; if ($_FILES[&apos;Product&apos;][&apos;error&apos;][&apos;pics&apos;][$k] &gt; 0) &#123; continue; &#125; $key = uniqid(); $qiniu-&gt;uploadFile($file,$key); $pics[$key] = $qiniu-&gt;getLink($key); &#125; $pics = json_encode($pics); return compact(&apos;cover&apos;,&apos;pics&apos;); &#125; Share Docker 宿主机连接Docker数据库 docker-compose exec mysql bash mysql -uroot -proot ALTER USER ‘root’@’%’ IDENTIFIED WITH mysql_native_password BY ‘root’;]]></content>
      <categories>
        <category>ARTS</category>
      </categories>
      <tags>
        <tag>ARTS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[安装PHP7.2]]></title>
    <url>%2F2019%2F05%2F28%2F2%2F</url>
    <content type="text"><![CDATA[刻意练习,每日精进 当我们用Homebrew安装应用时，会出现此问题，显示Homebrew无法访问这些位置并添加在OS X上为您安装软件所需的文件 对于上面问题，我们应尝试回收权限，解决方案如下：首先打开终端，然后输入： sudo chown -R whoami:admin /usr/local/bin 接着系统会提醒你输入密码,输入密码回车之后接着输入： sudo chown -R whoami:admin /usr/local/share 之后就能在终端中用brew install 安装文件了 安装 PHP7.2 来代替系统自带的 PHP7.1：brew tap homebrew/homebrew-corebrew install php72echo export PATH=”$(brew –prefix homebrew/php/php72)/bin:$PATH” &gt;&gt; ~/.bash_profile # 代替系统自带的 phpecho export PATH=”$(brew –prefix homebrew/php/php72)/sbin:$PATH” &gt;&gt; ~/.bash_profile # 代替系统自带的 php-fpmsource ~/. sudo killall php-fpm &amp;&amp; sudo php-fpm]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[zsh常用命令]]></title>
    <url>%2F2019%2F05%2F28%2F3%2F</url>
    <content type="text"><![CDATA[刻意练习,每日精进 zsh常用命令/快捷键 123456789101112131415161718192021222324252627282930313233343536373839404142434445alias ga=&apos;git add&apos;alias gaa=&apos;git add --all&apos;alias gapa=&apos;git add --patch&apos;alias gau=&apos;git add --update&apos;alias gav=&apos;git add --verbose&apos;alias gap=&apos;git apply&apos;alias gb=&apos;git branch&apos;alias gba=&apos;git branch -a&apos;alias gbd=&apos;git branch -d&apos;alias gbda=&apos;git branch --no-color --merged | command grep -vE &quot;^(\*|\s*(master|develop|dev)\s*$)&quot; | command xargs -n 1 git branch -d&apos;alias gbD=&apos;git branch -D&apos;alias gbl=&apos;git blame -b -w&apos;alias gbnm=&apos;git branch --no-merged&apos;alias gbr=&apos;git branch --remote&apos;alias gbs=&apos;git bisect&apos;alias gbsb=&apos;git bisect bad&apos;alias gbsg=&apos;git bisect good&apos;alias gbsr=&apos;git bisect reset&apos;alias gbss=&apos;git bisect start&apos;alias gc=&apos;git commit -v&apos;alias gc!=&apos;git commit -v --amend&apos;alias gcn!=&apos;git commit -v --no-edit --amend&apos;alias gca=&apos;git commit -v -a&apos;alias gca!=&apos;git commit -v -a --amend&apos;alias gcan!=&apos;git commit -v -a --no-edit --amend&apos;alias gcans!=&apos;git commit -v -a -s --no-edit --amend&apos;alias gcam=&apos;git commit -a -m&apos;alias gcsm=&apos;git commit -s -m&apos;alias gcb=&apos;git checkout -b&apos;alias gcf=&apos;git config --list&apos;alias gcl=&apos;git clone --recurse-submodules&apos;alias gclean=&apos;git clean -id&apos;alias gpristine=&apos;git reset --hard &amp;&amp; git clean -dfx&apos;alias gcm=&apos;git checkout master&apos;alias gcd=&apos;git checkout develop&apos;alias gcmsg=&apos;git commit -m&apos;alias gco=&apos;git checkout&apos;alias gcount=&apos;git shortlog -sn&apos;compdef _git gcountalias gcp=&apos;git cherry-pick&apos;alias gcpa=&apos;git cherry-pick --abort&apos;alias gcpc=&apos;git cherry-pick --continue&apos;alias gcs=&apos;git commit -S&apos;]]></content>
      <categories>
        <category>zsh</category>
        <category>mac</category>
      </categories>
      <tags>
        <tag>zsh</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[laravel-admin用法]]></title>
    <url>%2F2019%2F05%2F28%2F5%2F</url>
    <content type="text"><![CDATA[刻意练习,每日精进 laravel-admin用法 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566671. composer-laravel-镜像 composer config -g repo.packagist composer https://packagist.laravel-china.org 2. 加法 add()、 减法 subtract()、 乘法 multiply()、 除法 divide()3. php artisan ide-helper:models php artisan ide-helper:generate4. //只读 $form-&gt;text(&apos;from_address&apos;, &apos;支付地址&apos;)-&gt;readonly(); //show的使用 通过 as 可以使用模型关联调用数据 $show-&gt;user_id(&apos;用户名&apos;)-&gt;as(function () &#123; return $this-&gt;user-&gt;name; &#125;); //禁用行操作列 $grid-&gt;disableActions(); //禁用分页条 $grid-&gt;disablePagination(); //禁用创建按钮 $grid-&gt;disableCreateButton(); //禁用查询过滤器 $grid-&gt;disableFilter(); //禁用行选择checkbox $grid-&gt;disableRowSelector(); //禁用 $grid-&gt;disableTools(); //禁用导出 $grid-&gt;disableExport(); //设置分页选择器选项 $grid-&gt;perPages([10, 20, 30, 40, 50]); $grid-&gt;actions(function (Grid\Displayers\Actions $actions) &#123; $actions-&gt;disableView(); $actions-&gt;disableEdit(); $actions-&gt;disableDelete(); &#125;); 5. js swal 使用$script = &lt;&lt;&lt;SCRIPT $(&apos;button[type=submit]&apos;).on(&apos;click&apos;,function(e)&#123; event.preventDefault(); swal(&#123; title: &apos;请妥善保存好助记词!&apos;, text: &apos;遗失后不能恢复!&apos;, type: &apos;warning&apos;, showCancelButton: true, confirmButtonColor: &apos;#3085d6&apos;, cancelButtonColor: &apos;#d33&apos;, confirmButtonText: &apos;确认提交&apos;, cancelButtonText: &quot;取消&quot;, &#125;).then(function (isConfirm) &#123; if (isConfirm.value == true )&#123; $(&quot;form&quot;).submit(); &#125;else&#123; event.preventDefault(); return false; &#125; &#125;).catch(swal.noop); &#125;);SCRIPT; Admin::script($script);]]></content>
      <categories>
        <category>laravel</category>
      </categories>
      <tags>
        <tag>laravel-admin</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[高并发优化记录]]></title>
    <url>%2F2019%2F05%2F28%2F1%2F</url>
    <content type="text"><![CDATA[刻意练习,每日精进 流量优化(目的:可以使用下载工具下载，又可以防止盗链的方法) 序号 优化方法 解决方案 1 防盗链处理 1. 判断引用地址,判断浏览器请求时HTTP头的Referer字段的值 2.使用登录验证 缺点是访客无法匿名下载 3. 使用cookie 缺点: 同 2 4. 使用POST下载 缺点: 无法使用下载工具，更没法实现断点续传 5.使用图形验证码 缺点: 影响用户体验 6. 使用动态文件名 7. 擅改资源的内容 8.打包下载 缺点:需要解压缩 2 图片处理 将多种按钮 提示 图片 合成一张图 3 Js. Css 合并 压缩工具: 在线压缩,YUI Compressor等等 前端优化 序号 优化方法 1 减少HTTP请求 2 异步请求 3 浏览器缓存和文件压缩 4 CDN 加速 5 建立独立的图片服务器 服务端优化 序号 优化方法 1 页面静态化 2 并发处理 3 队列处理 数据库优化 序号 优化方法 1 数据库缓存 redis/Memcache 2 分库分表\分区操作 主从复制 3 读写分离 4 负载均衡 序号 数据库优化方法 1 数据类型优化 按需选择数据类型 1. 整型&gt;datetime 2. 整型&gt;date&gt;time&gt;enum,char&gt;varchar&gt;blob&gt;text 3. 够用就行 大的字段浪费内存,影响速度 4. 避免使用null (不利于索引,要用特殊字节标注,在磁盘上占据空间更大) 2 索引优化(理想索引: 查询频繁,区分度高,长度小,尽可能覆盖常用查询字段 常用方法: 截取不同长度,测试其区分度(0.1 可以接受)) 1. 合适字段创建合适索引(where列上创建索引) 2. 复杂索引的前缀原则 3. like %a% 索引失效 4. 3 SQL语句优化 1. 优化查询过程中的数据访问(按需查询,limit,列名) 2. 优化长难句的查询语句(变复杂为简单,切分查询.分解) 3. 特定查询语句 limit count 子查询 groupby 4 存储引擎优化 行级锁,事务,外键,独立表空间 5 数据表设计优化 分区操作,分库分表 6 数据库架构优化 1.主从复制 2. 读写分离 3. 双主热备 4. 负载均衡 web服务器优化负载均衡 反向代理]]></content>
      <categories>
        <category>高并发</category>
      </categories>
      <tags>
        <tag>高并发</tag>
        <tag>优化</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux服务器使用ssh连接 实现免登陆]]></title>
    <url>%2F2019%2F05%2F28%2F4%2F</url>
    <content type="text"><![CDATA[刻意练习,每日精进 Linux服务器使用ssh连接 实现免登陆参考资料 SSH的工作原理是将客户端程序连接到ssh服务器 Ubuntu(Centors类似 命令有所不同) 123456781.主配置文件于/etc/ssh/sshd_config2.Port 22 端口声明指定sshd服务器将侦听连接的端口 如需更改端口 直接添加后 测试完成 再删除 223.PermitRootLogin 选择是否允许root登录4.LoginGraceTime 指定在未成功登录的情况下保持连接活动的秒数sudo service ssh restart 重启服务sudo systemctl restart ssh 如何使用密钥登录SSH1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556 [root@7S ssh]# systemctl stop firewalld.service //关闭防火墙 [root@7S ssh]# systemctl is-enabled firewalld.service //查看防火墙状态 enabled [root@7S ssh]# firewall-cmd --zone=public --add-port=1212/tcp --permanent 添加 放行端口 1212 FirewallD is not running // 防火墙关闭 [root@7S ssh]# systemctl restart firewalld.service //启动 [root@7S ssh]# firewall-cmd --zone=public --add-port=1212/tcp --permanent //继续添加 success firewall-cmd --zone=public --list-ports //查看所有端口* 创建SSH密钥(本地的计算机上生成SSH密钥)ssh-keygen -t rsa //创建按 Enter 键接受默认值 (Mac)密钥在〜/.ssh/id_rsa.pub和〜/.ssh / id_rsa中 (window 系统不一样 Admin文件名不一样) /C/users/Admin/.ssh/id_rsassh-copy-id root@192.168.100.00 //将公钥复制到远程服务器 输入密码 下次不需要使用密码 即可登录更改 端口 登录ssh -p 1212 root@192.168.100.00 安全考虑 禁用密码验证/etc/ssh/sshd_configPasswordAuthentication no //去掉注释 改为 noPubkeyAuthentication yes // 默认不修改ChallengeResponseAuthentication no // 默认不修改sudo systemctl restart ssh //重启服务 如有错误 关闭SELinux 或者 向SELinux中添加修改的SSH端口(如下)1. 安装semanagesemanage是SELinux的管理工具，是用于向SELinux添加和修改ssh端口号* 安装依赖 yum install policycoreutils-python* 安装semanage yum provides semanage2:使用semanage向SELinux中添加我们刚刚添加的端口号(1212)查询当前 ssh 服务端口: semanage port -l | grep ssh向 SELinux 中添加我们需要添加的ssh端口(1212): semanage port -a -t ssh_port_t -p tcp 1212验证 ssh 端口是否添加成功: semanage port -l | grep ssh重启 ssh 服务: systemctl restart sshd.service第二种方法:1. ssh-copy-id -i ~/.ssh/id_rsa.pub root@192.168.100.000 //将本机的id_rsa.pub公钥文件内容复制到远程目标机的.ssh/authorized_keys文件中2. 本地复制: scp .ssh/id_rsa.pub user@192.168.1.100:/home/root/ 服务器操作: mkdir -p /home/root/.ssh/ mv /home/root/id_rsa.pub /home/root/.ssh/authorized_keys //authorized_keys 必须如此命名 登录即可]]></content>
      <categories>
        <category>linux</category>
        <category>ssh</category>
      </categories>
      <tags>
        <tag>linix</tag>
        <tag>ssh</tag>
      </tags>
  </entry>
</search>
