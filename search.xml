<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[ARTS_2]]></title>
    <url>%2F2019%2F05%2F30%2F1%2F</url>
    <content type="text"><![CDATA[刻意练习,每日精进 两数之和 12345678910111213class Solution &#123; function twoSum($nums,$target) &#123; foreach($nums as $k=&gt;$v)&#123; $mu = $target-$v; $res = array_search($mu,$nums); if($res)&#123; return [$k,$res]; &#125;else&#123; array_diff($nums, [$v]); &#125; &#125; &#125; &#125; Review Laravel 翻译：https://learnku.com/laravel/t/26375 在 Laravel 项目中，我们收到很多希望能够为构建多语言 Web 应用提供更好支持的请求。 Tips Yii2 使用图片上传 Model 定义： ![62a20bfaa9212e3f5c94b6219d52cce4.png](evernotecid://2D3ECD61-9BE7-4422-B7DD-05A6FC560EE0/appyinxiangcom/23972896/ENResource/p2) 控制器使用： 12345678910111213141516171819202122private function upload()&#123; if ($_FILES[&apos;Product&apos;][&apos;error&apos;][&apos;cover&apos;] &gt; 0) &#123; return false; &#125; $zone = &apos;south_china&apos;; $qiniu = new Qiniu(Product::AK,Product::SK,Product::DOMAIN, Product::BUCKET,$zone); $key = uniqid(); $qiniu-&gt;uploadFile($_FILES[&apos;Product&apos;][&apos;tmp_name&apos;][&apos;cover&apos;],$key); $cover = $qiniu-&gt;getLink($key); $pics =[]; foreach ($_FILES[&apos;Product&apos;][&apos;tmp_name&apos;][&apos;pics&apos;] as $k=&gt;$file) &#123; if ($_FILES[&apos;Product&apos;][&apos;error&apos;][&apos;pics&apos;][$k] &gt; 0) &#123; continue; &#125; $key = uniqid(); $qiniu-&gt;uploadFile($file,$key); $pics[$key] = $qiniu-&gt;getLink($key); &#125; $pics = json_encode($pics); return compact(&apos;cover&apos;,&apos;pics&apos;); &#125; Share Docker 宿主机连接Docker数据库 docker-compose exec mysql bash mysql -uroot -proot ALTER USER ‘root’@’%’ IDENTIFIED WITH mysql_native_password BY ‘root’;]]></content>
      <categories>
        <category>ARTS</category>
      </categories>
      <tags>
        <tag>ARTS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[centos 搭建 LNMP 环境]]></title>
    <url>%2F2019%2F05%2F30%2F10%2F</url>
    <content type="text"><![CDATA[刻意练习,每日精进 linux Centos 搭建 LNMP 环境yum 命令: yum search xxx ：搜索带有某个关键字的安装包 1. 安装更新yumyum update 2. 安装 nginx yum localinstall http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm //nginx源 yum repolist enabled | grep “nginx*” //显示仓库列表 yum -y install nginx systemctl start nginx //启动 systemctl enable nginx.service //设置开机自启动 systemctl list-dependencies | grep nginx //检查开机自启动是否设置成功 3. 浏览器检测是否安装成功访问不成功 方法一: systemctl stop firewalld.service //关闭防火墙 方法二: firewall-cmd --zone=public --add-port=80/tcp --permanent //添加80端口 firewall-cmd --reload //重启防火墙 firewall-cmd --list-ports //查看是否添加成功 1212/tcp 80/tcp //显示 即成功 浏览器访问 Welcome to nginx! //成功显示 4.安装mysql yum -y localinstall http://dev.mysql.com/get/mysql57-community-release-el7-7.noarch.rpm //安装mysql源 yum repolist enabled | grep “mysql.-community.“ yum -y install mysql-community-server install mysql-community-devel //安装mysql 查看 版本信息 [root@7S ~]# rpm -qi mysql-community-server 12345678910111213141516171819202122232425262728293031323334353637Name : mysql-community-serverVersion : 5.7.26Release : 1.el7Architecture: x86_64Install Date: 2019年05月29日 星期三 10时42分22秒Group : Applications/DatabasesSize : 781939563License : Copyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved. Under GPLv2 license as shown in the Description field.Signature : DSA/SHA1, 2019年04月15日 星期一 17时21分36秒, Key ID 8c718d3b5072e1f5Source RPM : mysql-community-5.7.26-1.el7.src.rpmBuild Date : 2019年04月13日 星期六 22时42分09秒Build Host : loki02.no.oracle.comRelocations : (not relocatable)Packager : MySQL Release Engineering &lt;mysql-build@oss.oracle.com&gt;Vendor : Oracle and/or its affiliatesURL : http://www.mysql.com/Summary : A very fast and reliable SQL database serverDescription :The MySQL(TM) software delivers a very fast, multi-threaded, multi-user,and robust SQL (Structured Query Language) database server. MySQL Serveris intended for mission-critical, heavy-load production systems as wellas for embedding into mass-deployed software. MySQL is a trademark ofOracle and/or its affiliatesThe MySQL software has Dual Licensing, which means you can use the MySQLsoftware free of charge under the GNU General Public License(http://www.gnu.org/licenses/). You can also purchase commercial MySQLlicenses from Oracle and/or its affiliates if you do not wish to be bound by the terms ofthe GPL. See the chapter &quot;Licensing and Support&quot; in the manual forfurther info.The MySQL web site (http://www.mysql.com/) provides the latest news andinformation about the MySQL software. Also please see the documentationand the manual for more information.This package includes the MySQL server binary as well as related utilitiesto run and administer a MySQL server. service mysqld start //启动mysql service mysqld status 或者 ps -ef | grep mysql //检查mysql正常启动 systemctl enable mysqld.service //设置mysqld服务开机自启动 systemctl list-dependencies | grep mysqld //检查mysqld开机自启动是否设置成功 mysql5.7 增强了安全机制, 系统会自动生成一个随机的密码 cat /var/log/mysqld.log|grep ‘A temporary password’ //查看mysql的随机密码 使用查询得到的随机密码在终端登录 mysql -u root -p 更改密码(mysql文档规定,密码必须包括大小写字母数字加特殊符号&gt;8位) 根据获取的随机密码登录 ALTER USER ‘root‘@’localhost’ IDENTIFIED BY ‘Yourpassword’;修改密码 退出mysql客户端,用刚才修改的密码登录确保密码修改成功 exit； 使用新密码登录 5. php7.2 安装 rpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm rpm -Uvh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm yum -y install php72w php72w-fpm yum -y install php72w-mbstring php72w-common php72w-gd php72w-mcrypt yum -y install php72w-mysql php72w-xml php72w-cli php72w-devel yum -y install php72w-pecl-memcached php72w-pecl-redis php72w-opcache php -m //看扩展 php -v //php 版本信息6. nginx 配置新建.conf后缀的文件文件目录在/etc/nginx/conf.d/下面 复制下面内容放进去ps aux | grep “nginx: worker process” | awk ‘{print $1}’ // 查看当前用户chcon -R -t httpd_sys_content_t /home/www/ // 递归地修改对象的安全上下文gpasswd -a nginx root //添加成员chmod g+x /root 1234567891011121314151617181920server &#123; listen 80; server_name danshufenxiang.com; root /home/www; #自定义站点位置这是你的站点根目录 index index.php index.html index.htm; location / &#123; &#125; error_page 500 502 503 504 /50x.html; location = /50x.html &#123; root /usr/share/nginx/html; &#125; location ~ \.php$ &#123; fastcgi_pass 127.0.0.1:9000; fastcgi_index index.php; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; include fastcgi_params; &#125;&#125;]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>lnmp</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ARTS_8]]></title>
    <url>%2F2019%2F05%2F29%2F8%2F</url>
    <content type="text"><![CDATA[刻意练习,每日精进 删除排序数组中的重复项 1234567891011121314151617181920212223 class Solution &#123; /** * @param Integer[] $nums * @return Integer */ function removeDuplicates(&amp;$nums) &#123; $len = count($nums); for ($i=0;$i&lt;$len;$i++) &#123; if (!isset($nums[$i])) &#123; continue; &#125; for ($j=$i+1;$j&lt;$len;$j++) &#123; if ($nums[$i]==$nums[$j]) &#123; unset($nums[$j]); &#125; else &#123; break; &#125; &#125; &#125; return count($nums); &#125;&#125; Review How To Use SSH to Connect to a Remote Server in Ubuntu. 原文 Tips总结下高并发 相关的知识点 ShareCentos防火墙操作 yum -y install php72w php72w-fpm yum -y install php72w-mbstring php72w-common php72w-gd php72w-mcrypt yum -y install php72w-mysql php72w-xml php72w-cli php72w-devel yum -y install php72w-pecl-memcached php72w-pecl-redis php72w-opcache]]></content>
      <categories>
        <category>ARTS</category>
      </categories>
      <tags>
        <tag>ARTS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Centos防火墙操作]]></title>
    <url>%2F2019%2F05%2F29%2F6%2F</url>
    <content type="text"><![CDATA[刻意练习,每日精进 1、firewalld的基本使用 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859启动： systemctl start firewalld查看状态： systemctl status firewalld停止： systemctl disable firewalld禁用： systemctl stop firewalld2. systemctl是CentOS7的服务管理工具中主要的工具，它融合之前service和chkconfig的功能于一体。启动防火墙： systemctl start firewalld.service关闭防火墙： systemctl stop firewalld.service重启防火墙： systemctl restart firewalld.service显示防火墙的状态： systemctl status firewalld.service在开机时防火墙： systemctl enable firewalld.service在开机时禁用防火墙： systemctl disable firewalld.service查看防火墙是否开机启动： systemctl is-enabled firewalld.service查看已启动的服务列表： systemctl list-unit-files|grep enabled查看启动失败的服务列表： systemctl --failed3.配置firewalld-cmd查看版本： firewall-cmd --version查看帮助： firewall-cmd --help显示状态： firewall-cmd --state查看所有打开的端口： firewall-cmd --zone=public --list-ports更新防火墙规则： firewall-cmd --reload查看区域信息: firewall-cmd --get-active-zones查看指定接口所属区域： firewall-cmd --get-zone-of-interface=eth0拒绝所有包： firewall-cmd --panic-on取消拒绝状态： firewall-cmd --panic-off查看是否拒绝： firewall-cmd --query-panic4：开启端口添加 firewall-cmd --zone=public --add-port=80/tcp --permanent （--permanent永久生效，没有此参数重启后失效） #开启80端口重新载入 firewall-cmd --reload查看 firewall-cmd --zone=public --query-port=80/tcp #查看80端口是否开放删除 firewall-cmd --zone= public --remove-port=80/tcp --permanent #删除80端口配置]]></content>
      <categories>
        <category>linux</category>
        <category>Centos</category>
      </categories>
      <tags>
        <tag>Centos</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ARTS_1]]></title>
    <url>%2F2019%2F05%2F28%2F9%2F</url>
    <content type="text"><![CDATA[刻意练习,每日精进 两数之和 12345678910111213class Solution &#123; function twoSum($nums,$target) &#123; foreach($nums as $k=&gt;$v)&#123; $mu = $target-$v; $res = array_search($mu,$nums); if($res)&#123; return [$k,$res]; &#125;else&#123; array_diff($nums, [$v]); &#125; &#125; &#125; &#125; Review Laravel 翻译：https://learnku.com/laravel/t/26375 在 Laravel 项目中，我们收到很多希望能够为构建多语言 Web 应用提供更好支持的请求。 Tips Yii2 使用图片上传 Model 定义： ![62a20bfaa9212e3f5c94b6219d52cce4.png](evernotecid://2D3ECD61-9BE7-4422-B7DD-05A6FC560EE0/appyinxiangcom/23972896/ENResource/p1) 控制器使用： 12345678910111213141516171819202122private function upload()&#123; if ($_FILES[&apos;Product&apos;][&apos;error&apos;][&apos;cover&apos;] &gt; 0) &#123; return false; &#125; $zone = &apos;south_china&apos;; $qiniu = new Qiniu(Product::AK,Product::SK,Product::DOMAIN, Product::BUCKET,$zone); $key = uniqid(); $qiniu-&gt;uploadFile($_FILES[&apos;Product&apos;][&apos;tmp_name&apos;][&apos;cover&apos;],$key); $cover = $qiniu-&gt;getLink($key); $pics =[]; foreach ($_FILES[&apos;Product&apos;][&apos;tmp_name&apos;][&apos;pics&apos;] as $k=&gt;$file) &#123; if ($_FILES[&apos;Product&apos;][&apos;error&apos;][&apos;pics&apos;][$k] &gt; 0) &#123; continue; &#125; $key = uniqid(); $qiniu-&gt;uploadFile($file,$key); $pics[$key] = $qiniu-&gt;getLink($key); &#125; $pics = json_encode($pics); return compact(&apos;cover&apos;,&apos;pics&apos;); &#125; Share Docker 宿主机连接Docker数据库 docker-compose exec mysql bash mysql -uroot -proot ALTER USER ‘root’@’%’ IDENTIFIED WITH mysql_native_password BY ‘root’;]]></content>
      <categories>
        <category>ARTS</category>
      </categories>
      <tags>
        <tag>ARTS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[安装PHP7.2]]></title>
    <url>%2F2019%2F05%2F28%2F2%2F</url>
    <content type="text"><![CDATA[刻意练习,每日精进 当我们用Homebrew安装应用时，会出现此问题，显示Homebrew无法访问这些位置并添加在OS X上为您安装软件所需的文件 对于上面问题，我们应尝试回收权限，解决方案如下：首先打开终端，然后输入： sudo chown -R whoami:admin /usr/local/bin 接着系统会提醒你输入密码,输入密码回车之后接着输入： sudo chown -R whoami:admin /usr/local/share 之后就能在终端中用brew install 安装文件了 安装 PHP7.2 来代替系统自带的 PHP7.1：brew tap homebrew/homebrew-corebrew install php72echo export PATH=”$(brew –prefix homebrew/php/php72)/bin:$PATH” &gt;&gt; ~/.bash_profile # 代替系统自带的 phpecho export PATH=”$(brew –prefix homebrew/php/php72)/sbin:$PATH” &gt;&gt; ~/.bash_profile # 代替系统自带的 php-fpmsource ~/. sudo killall php-fpm &amp;&amp; sudo php-fpm]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[zsh常用命令]]></title>
    <url>%2F2019%2F05%2F28%2F3%2F</url>
    <content type="text"><![CDATA[刻意练习,每日精进 zsh常用命令/快捷键 123456789101112131415161718192021222324252627282930313233343536373839404142434445alias ga=&apos;git add&apos;alias gaa=&apos;git add --all&apos;alias gapa=&apos;git add --patch&apos;alias gau=&apos;git add --update&apos;alias gav=&apos;git add --verbose&apos;alias gap=&apos;git apply&apos;alias gb=&apos;git branch&apos;alias gba=&apos;git branch -a&apos;alias gbd=&apos;git branch -d&apos;alias gbda=&apos;git branch --no-color --merged | command grep -vE &quot;^(\*|\s*(master|develop|dev)\s*$)&quot; | command xargs -n 1 git branch -d&apos;alias gbD=&apos;git branch -D&apos;alias gbl=&apos;git blame -b -w&apos;alias gbnm=&apos;git branch --no-merged&apos;alias gbr=&apos;git branch --remote&apos;alias gbs=&apos;git bisect&apos;alias gbsb=&apos;git bisect bad&apos;alias gbsg=&apos;git bisect good&apos;alias gbsr=&apos;git bisect reset&apos;alias gbss=&apos;git bisect start&apos;alias gc=&apos;git commit -v&apos;alias gc!=&apos;git commit -v --amend&apos;alias gcn!=&apos;git commit -v --no-edit --amend&apos;alias gca=&apos;git commit -v -a&apos;alias gca!=&apos;git commit -v -a --amend&apos;alias gcan!=&apos;git commit -v -a --no-edit --amend&apos;alias gcans!=&apos;git commit -v -a -s --no-edit --amend&apos;alias gcam=&apos;git commit -a -m&apos;alias gcsm=&apos;git commit -s -m&apos;alias gcb=&apos;git checkout -b&apos;alias gcf=&apos;git config --list&apos;alias gcl=&apos;git clone --recurse-submodules&apos;alias gclean=&apos;git clean -id&apos;alias gpristine=&apos;git reset --hard &amp;&amp; git clean -dfx&apos;alias gcm=&apos;git checkout master&apos;alias gcd=&apos;git checkout develop&apos;alias gcmsg=&apos;git commit -m&apos;alias gco=&apos;git checkout&apos;alias gcount=&apos;git shortlog -sn&apos;compdef _git gcountalias gcp=&apos;git cherry-pick&apos;alias gcpa=&apos;git cherry-pick --abort&apos;alias gcpc=&apos;git cherry-pick --continue&apos;alias gcs=&apos;git commit -S&apos;]]></content>
      <categories>
        <category>zsh</category>
        <category>mac</category>
      </categories>
      <tags>
        <tag>zsh</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[laravel-admin用法]]></title>
    <url>%2F2019%2F05%2F28%2F5%2F</url>
    <content type="text"><![CDATA[刻意练习,每日精进 laravel-admin用法 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566671. composer-laravel-镜像 composer config -g repo.packagist composer https://packagist.laravel-china.org 2. 加法 add()、 减法 subtract()、 乘法 multiply()、 除法 divide()3. php artisan ide-helper:models php artisan ide-helper:generate4. //只读 $form-&gt;text(&apos;from_address&apos;, &apos;支付地址&apos;)-&gt;readonly(); //show的使用 通过 as 可以使用模型关联调用数据 $show-&gt;user_id(&apos;用户名&apos;)-&gt;as(function () &#123; return $this-&gt;user-&gt;name; &#125;); //禁用行操作列 $grid-&gt;disableActions(); //禁用分页条 $grid-&gt;disablePagination(); //禁用创建按钮 $grid-&gt;disableCreateButton(); //禁用查询过滤器 $grid-&gt;disableFilter(); //禁用行选择checkbox $grid-&gt;disableRowSelector(); //禁用 $grid-&gt;disableTools(); //禁用导出 $grid-&gt;disableExport(); //设置分页选择器选项 $grid-&gt;perPages([10, 20, 30, 40, 50]); $grid-&gt;actions(function (Grid\Displayers\Actions $actions) &#123; $actions-&gt;disableView(); $actions-&gt;disableEdit(); $actions-&gt;disableDelete(); &#125;); 5. js swal 使用$script = &lt;&lt;&lt;SCRIPT $(&apos;button[type=submit]&apos;).on(&apos;click&apos;,function(e)&#123; event.preventDefault(); swal(&#123; title: &apos;请妥善保存好助记词!&apos;, text: &apos;遗失后不能恢复!&apos;, type: &apos;warning&apos;, showCancelButton: true, confirmButtonColor: &apos;#3085d6&apos;, cancelButtonColor: &apos;#d33&apos;, confirmButtonText: &apos;确认提交&apos;, cancelButtonText: &quot;取消&quot;, &#125;).then(function (isConfirm) &#123; if (isConfirm.value == true )&#123; $(&quot;form&quot;).submit(); &#125;else&#123; event.preventDefault(); return false; &#125; &#125;).catch(swal.noop); &#125;);SCRIPT; Admin::script($script);]]></content>
      <categories>
        <category>laravel</category>
      </categories>
      <tags>
        <tag>laravel-admin</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[高并发优化记录]]></title>
    <url>%2F2019%2F05%2F28%2F1%2F</url>
    <content type="text"><![CDATA[刻意练习,每日精进 流量优化(目的:可以使用下载工具下载，又可以防止盗链的方法) 序号 优化方法 解决方案 1 防盗链处理 1. 判断引用地址,判断浏览器请求时HTTP头的Referer字段的值 2.使用登录验证 缺点是访客无法匿名下载 3. 使用cookie 缺点: 同 2 4. 使用POST下载 缺点: 无法使用下载工具，更没法实现断点续传 5.使用图形验证码 缺点: 影响用户体验 6. 使用动态文件名 7. 擅改资源的内容 8.打包下载 缺点:需要解压缩 2 图片处理 将多种按钮 提示 图片 合成一张图 3 Js. Css 合并 压缩工具: 在线压缩,YUI Compressor等等 前端优化 序号 优化方法 1 减少HTTP请求 2 异步请求 3 浏览器缓存和文件压缩 4 CDN 加速 5 建立独立的图片服务器 服务端优化 序号 优化方法 1 页面静态化 2 并发处理 3 队列处理 数据库优化 序号 优化方法 1 数据库缓存 redis/Memcache 2 分库分表\分区操作 主从复制 3 读写分离 4 负载均衡 序号 数据库优化方法 1 数据类型优化 按需选择数据类型 1. 整型&gt;datetime 2. 整型&gt;date&gt;time&gt;enum,char&gt;varchar&gt;blob&gt;text 3. 够用就行 大的字段浪费内存,影响速度 4. 避免使用null (不利于索引,要用特殊字节标注,在磁盘上占据空间更大) 2 索引优化(理想索引: 查询频繁,区分度高,长度小,尽可能覆盖常用查询字段 常用方法: 截取不同长度,测试其区分度(0.1 可以接受)) 1. 合适字段创建合适索引(where列上创建索引) 2. 复杂索引的前缀原则 3. like %a% 索引失效 4. 3 SQL语句优化 1. 优化查询过程中的数据访问(按需查询,limit,列名) 2. 优化长难句的查询语句(变复杂为简单,切分查询.分解) 3. 特定查询语句 limit count 子查询 groupby 4 存储引擎优化 行级锁,事务,外键,独立表空间 5 数据表设计优化 分区操作,分库分表 6 数据库架构优化 1.主从复制 2. 读写分离 3. 双主热备 4. 负载均衡 web服务器优化负载均衡 反向代理]]></content>
      <categories>
        <category>高并发</category>
      </categories>
      <tags>
        <tag>高并发</tag>
        <tag>优化</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux服务器使用ssh连接]]></title>
    <url>%2F2019%2F05%2F28%2F4%2F</url>
    <content type="text"><![CDATA[刻意练习,每日精进 Linux服务器使用ssh连接参考资料 SSH的工作原理是将客户端程序连接到ssh服务器 Ubuntu(Centors类似 命令有所不同) 123456781.主配置文件于/etc/ssh/sshd_config2.Port 22 端口声明指定sshd服务器将侦听连接的端口 如需更改端口 直接添加后 测试完成 再删除 223.PermitRootLogin 选择是否允许root登录4.LoginGraceTime 指定在未成功登录的情况下保持连接活动的秒数sudo service ssh restart 重启服务sudo systemctl restart ssh 如何使用密钥登录SSH1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556 [root@7S ssh]# systemctl stop firewalld.service //关闭防火墙 [root@7S ssh]# systemctl is-enabled firewalld.service //查看防火墙状态 enabled [root@7S ssh]# firewall-cmd --zone=public --add-port=1212/tcp --permanent 添加 放行端口 1212 FirewallD is not running // 防火墙关闭 [root@7S ssh]# systemctl restart firewalld.service //启动 [root@7S ssh]# firewall-cmd --zone=public --add-port=1212/tcp --permanent //继续添加 success firewall-cmd --zone=public --list-ports //查看所有端口* 创建SSH密钥(本地的计算机上生成SSH密钥)ssh-keygen -t rsa //创建按 Enter 键接受默认值 (Mac)密钥在〜/.ssh/id_rsa.pub和〜/.ssh / id_rsa中 (window 系统不一样 Admin文件名不一样) /C/users/Admin/.ssh/id_rsassh-copy-id root@192.168.100.00 //将公钥复制到远程服务器 输入密码 下次不需要使用密码 即可登录更改 端口 登录ssh -p 1212 root@192.168.100.00 安全考虑 禁用密码验证/etc/ssh/sshd_configPasswordAuthentication no //去掉注释 改为 noPubkeyAuthentication yes // 默认不修改ChallengeResponseAuthentication no // 默认不修改sudo systemctl restart ssh //重启服务 如有错误 关闭SELinux 或者 向SELinux中添加修改的SSH端口(如下)1. 安装semanagesemanage是SELinux的管理工具，是用于向SELinux添加和修改ssh端口号* 安装依赖 yum install policycoreutils-python* 安装semanage yum provides semanage2:使用semanage向SELinux中添加我们刚刚添加的端口号(1212)查询当前 ssh 服务端口: semanage port -l | grep ssh向 SELinux 中添加我们需要添加的ssh端口(1212): semanage port -a -t ssh_port_t -p tcp 1212验证 ssh 端口是否添加成功: semanage port -l | grep ssh重启 ssh 服务: systemctl restart sshd.service第二种方法:1. ssh-copy-id -i ~/.ssh/id_rsa.pub root@192.168.100.000 //将本机的id_rsa.pub公钥文件内容复制到远程目标机的.ssh/authorized_keys文件中2. 本地复制: scp .ssh/id_rsa.pub user@192.168.1.100:/home/root/ 服务器操作: mkdir -p /home/root/.ssh/ mv /home/root/id_rsa.pub /home/root/.ssh/authorized_keys //authorized_keys 必须如此命名 登录即可]]></content>
      <categories>
        <category>linux</category>
        <category>ssh</category>
      </categories>
      <tags>
        <tag>linix</tag>
        <tag>ssh</tag>
      </tags>
  </entry>
</search>
